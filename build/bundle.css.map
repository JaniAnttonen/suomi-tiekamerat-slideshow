{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Slideshow.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Slideshow from \"./Slideshow.svelte\";\n\n  var lunaReq = webOS.service.request(\"luna://com.palm.systemservice\", {\n    method: \"clock/getTime\",\n    parameters: {},\n    onSuccess: function(args) {\n      console.log(\"UTC:\", args.utc);\n    },\n    onFailure: function(args) {}\n  });\n</script>\n\n<style>\n  main {\n    margin: 0;\n    padding: 0;\n  }\n</style>\n\n<main>\n  <Slideshow />\n</main>\n",
    "<script>\n  import { onMount, onDestroy } from \"svelte\";\n  import { writable } from \"svelte/store\";\n\n  let cameras = [];\n  let stations = {};\n  const imageBufferSize = 3;\n  const imageBuffer = [];\n  const imageStore = writable([]);\n  let image = [];\n  let currentLocation = { municipality: \"\", province: \"\" };\n\n  const timeout = time => {\n    try {\n      return new Promise(res => setTimeout(() => res(), time));\n    } catch (error) {\n      console.log(error.toString());\n    }\n  };\n\n  const fetchCameras = async () => {\n    const response = await fetch(\n      \"https://tie.digitraffic.fi/api/v1/data/camera-data?lastUpdated=false\"\n    );\n    const json = await response.json();\n    return json.cameraStations\n      .map(cameraStation =>\n        cameraStation.cameraPresets\n          .filter(\n            camera =>\n              !camera.presentationName ||\n              (camera.presentationName &&\n                !camera.presentationName.toLowerCase().includes(\"tien\"))\n          )\n          .filter(camera => camera.imageUrl)\n          .map(camera => {\n            return { id: cameraStation.id, url: camera.imageUrl };\n          })\n      )\n      .flat();\n  };\n\n  const fetchStations = async () => {\n    const response = await fetch(\n      \"https://tie.digitraffic.fi/api/v1/metadata/camera-stations?lastUpdated=false\"\n    );\n    const json = await response.json();\n    json.features.forEach(\n      cameraStation =>\n        (stations[cameraStation.properties.id] = {\n          municipality: cameraStation.properties.municipality,\n          province: cameraStation.properties.province\n        })\n    );\n  };\n\n  const pushNewImageToBuffer = shift => {\n    shift && imageBuffer.shift();\n    const randInt = Math.floor(Math.random() * Math.floor(cameras.length));\n    imageBuffer.push(cameras[randInt]);\n    imageStore.set(imageBuffer);\n  };\n\n  const replaceImage = src => {\n    console.log(\"Image has to be replaced!\");\n    const index = imageBuffer.findIndex(src);\n    const randInt = Math.floor(Math.random() * Math.floor(cameras.length));\n    imageBuffer[index] = cameras[randInt];\n    imageStore.set(imageBuffer);\n  };\n\n  const loop = async () => {\n    while (true) {\n      await timeout(20000);\n      pushNewImageToBuffer(true);\n    }\n  };\n\n  onMount(async () => {\n    cameras = await fetchCameras();\n    await fetchStations();\n    console.log(cameras);\n    for (let i = 0; i < imageBufferSize; i++) {\n      pushNewImageToBuffer(false);\n    }\n    loop();\n  });\n\n  const unsubscribe = imageStore.subscribe(input => {\n    image = input;\n    if (input[0]) {\n      currentLocation = stations[input[0].id];\n    }\n  });\n\n  onDestroy(() => unsubscribe());\n</script>\n\n<style>\n  .slideShow {\n    position: relative;\n    display: flex;\n    height: 100vh;\n    width: 100vw;\n  }\n  .roadImage {\n    display: none;\n    flex-grow: 1;\n    object-fit: cover;\n  }\n  .roadImage:first-of-type {\n    display: flex;\n  }\n  .currentLocation {\n    position: absolute;\n    display: flex;\n    width: 100%;\n    bottom: 140px;\n    flex-direction: column;\n    align-items: center;\n    z-index: 2;\n  }\n  h1 {\n    width: 25%;\n    min-width: 400px;\n    text-align: center;\n    font-size: 72px;\n    font-weight: 400;\n    margin: 0 0 14px 0;\n    padding: 0;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.4);\n    color: #ffffff;\n    text-shadow: 0px -5px 60px #000000;\n  }\n  span {\n    color: rgba(255, 255, 255, 0.9);\n    font-size: 32px;\n    text-shadow: 0px -2px 40px #000000;\n  }\n</style>\n\n<div class=\"slideShow\">\n  {#each image as image, index}\n    <img src={image.url} alt={image.url} class=\"roadImage\" />\n  {/each}\n</div>\n<div class=\"currentLocation\">\n  <h1>{currentLocation.municipality}</h1>\n  <span>{currentLocation.province}</span>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAcE,IAAI,cAAC,CAAC,AACJ,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC;ACkFD,UAAU,cAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,AACd,CAAC,AACD,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,CAAC,CACZ,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,wBAAU,cAAc,AAAC,CAAC,AACxB,OAAO,CAAE,IAAI,AACf,CAAC,AACD,gBAAgB,cAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAClB,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACjD,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,AACpC,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC/B,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,AACpC,CAAC"
}